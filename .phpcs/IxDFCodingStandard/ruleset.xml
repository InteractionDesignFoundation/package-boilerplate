<?xml version="1.0"?>
<!--
    This is describes our custom inspection rules deeply relaying on PSR2 coding standard.
    We are divided CS configuration into 2 (second is 'phpcs.xml') files because PHPStorm can't use
    this ruleset as default standard when no arguments provided for phpcs command line tool.
    Also we want to keep this standard keep from any our file or directory-specific settings.

    @see https://github.com/InteractionDesignFoundation/IxDF-web/blob/develop/docs/environment/tools/code-quality-tools.md

    @see https://github.com/doctrine/coding-standard/blob/master/lib/Doctrine/ruleset.xml
    @see https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
    @see https://github.com/squizlabs/PHP_CodeSniffer/blob/master/src/Standards/PSR12/ruleset.xml
-->


<ruleset
    name="IxDF"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd">

    <description>The IxDF coding standard for Laravel applications.</description>

    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed"><!-- Disallow else if in favor of elseif -->
        <type>error</type>
    </rule>

    <!-- Import PSR-12 coding standard (base). It includes PSR1 + most of PSR2 + some Generic rules. -->
    <rule ref="PSR12">
        <exclude name="PSR12.Operators.OperatorSpacing"/><!-- Need to exclude concatenation rule but there is no such option :( -->
        <exclude name="PSR12.Files.OpenTag.NotAlone"/><!-- We use <?php declare(strict_types=1);\n as more readable option -->
        <exclude name="PSR12.Files.FileHeader"/><!-- checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine"/>

        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/><!-- Old eloquent relations use snake_case -->
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/><!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
        <exclude name="PSR2.Namespaces.UseDeclaration.SpaceAfterLastUse"/><!-- checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter"/><!-- checked by SlevomatCodingStandard.Namespaces.NamespaceSpacing -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterVariadic"/><!-- checked by SlevomatCodingStandard.Operators.SpreadOperatorSpacing -->
        <exclude name="PSR12.Functions.ReturnTypeDeclaration"/><!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing -->
        <exclude name="PSR12.Traits.UseDeclaration"/><!-- checked by SlevomatCodingStandard.Classes.TraitUseSpacing -->
        <exclude name="PSR12.Functions.NullableTypeDeclaration.WhitespaceFound"/><!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing.WhitespaceAfterNullabilitySymbol -->
    </rule>

    <!-- Generic -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/><!-- Forbid `array(...)` -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"><!-- Forbid empty statements -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/><!--But allow empty catch -->
    </rule>
    <rule ref="Generic.PHP.BacktickOperator"/><!-- Forbid backtick operator -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/><!-- Warn about variable assignments inside conditions -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/><!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/><!-- Forbid useless empty method overrides -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClass"/><!-- But allow to specify unused params for methods declared in parent classes -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassBeforeLastUsed"/><!-- But allow to specify unused params for methods declared in parent classes -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInExtendedClassAfterLastUsed"/><!-- But allow to specify unused params for methods declared in parent classes -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterface"/><!-- But allow to specify unused params for methods declared in parent interface -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceBeforeLastUsed"/><!-- But allow to specify unused params for methods declared in parent interface -->
        <exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundInImplementedInterfaceAfterLastUsed"/><!-- But allow to specify unused params for methods declared in parent interface -->
    </rule>
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/><!--Ensures that variables are not passed by reference when calling a function.-->
    <rule ref="Generic.Formatting.SpaceAfterCast"/><!-- Force whitespace after a type cast -->
    <rule ref="Generic.Files.OneObjectStructurePerFile"/><!-- Ensure there is a single class/interface/trait per file -->
    <rule ref="Generic.Files.LineLength.TooLong">
        <severity>1</severity>
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="250"/>
            <property name="ignoreComments" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/><!-- detects the usage of one and the same incrementer into an outer and an inner -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="7" /><!-- the cyclomatic complexity above which this sniff will generate warnings -->
            <property name="absoluteComplexity" value="7" /> <!-- the cyclomatic complexity above which this sniff will generate errors -->
        </properties>
    </rule>
    <rule ref="Generic.Metrics.NestingLevel"><!-- Checks how many level deep that code is nested within a function. -->
        <properties>
            <property name="nestingLevel" value="5"/><!-- Warnings. Ideally should be 2-->
            <property name="absoluteNestingLevel" value="5"/><!-- Errors. Ideally should be 3-->
        </properties>
    </rule>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"><!-- Array values are specified by using a string representation of the array. -->
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="array_push" value="null"/>
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="create_function" value="null"/>
                <element key="extract" value="null"/><!-- see https://youtu.be/8rdTSYljts4?t=2932 -->
                <element key="compact" value="null"/><!-- agreed by backend team: https://interaction-design.slack.com/archives/C04AT30UJ/p1586591609193200 and https://youtu.be/8rdTSYljts4?t=2932 -->
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_alter"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="print" value="echo"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
                <element key="die" value="null"/>
                <element key="exit" value="null"/>
                <element key="env" value="config"/>
                <element key="intval" value="(int)"/>
                <element key="floatval" value="(float)"/>
                <element key="doubleval" value="(float)"/>
                <element key="boolval" value="(bool)"/>
                <element key="strval" value="(string)"/>
                <element key="mt_rand" value="random_int"/>
                <element key="var_dump" value="null"/>
                <element key="dump" value="null"/>
                <element key="dd" value="null"/>
            </property>
        </properties>
        <exclude-pattern>.config/*</exclude-pattern>
    </rule>
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/><!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/><!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/><!-- Forbid short open tag -->
    <rule ref="Generic.VersionControl.GitMergeConflict"/><!--Detects merge conflict artifacts left in files-->

    <!-- Zend -->
    <rule ref="Zend.Debug.CodeAnalyzer"/><!--Runs the Zend Code Analyzer (from Zend Studio) on the file.-->

    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml"><!-- relative path to your ruleset.xml -->
        <exclude name="SlevomatCodingStandard.Classes.ClassStructure"/><!-- @see https://github.com/slevomat/coding-standard/issues/1191 -->

        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowCommentAfterCode"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>
        <exclude name="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/><!-- We explicitly mark methods required by interfaces -->
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses"/><!-- We do use new() -->
        <exclude name="SlevomatCodingStandard.ControlStructures.EarlyExit"/><!-- too many violations-->
        <exclude name="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing.IncorrectLinesCountBeforeControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing.IncorrectLinesCountAfterControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing.IncorrectLinesCountBeforeControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing.IncorrectLinesCountBeforeFirstControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator"/>
        <exclude name="SlevomatCodingStandard.Classes.ClassStructure.IncorrectGroupOrder"/>
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousErrorNaming.SuperfluousSuffix"/><!--Allow to use "Error" as classname suffix-->
        <exclude name="SlevomatCodingStandard.Files.LineLength.LineTooLong"/>
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/><!-- Will apply this rule for some dirs only in a project-specific config-->
        <exclude name="SlevomatCodingStandard.Functions.DisallowArrowFunction"/>
        <exclude name="SlevomatCodingStandard.Functions.DisallowEmptyFunction.EmptyFunction"/>
        <exclude name="SlevomatCodingStandard.Functions.RequireMultiLineCall.RequiredMultiLineCall"/>
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators"/>
        <exclude name="SlevomatCodingStandard.PHP.DisallowReference.DisallowedInheritingVariableByReference"/><!-- function() use (&$user) -->
        <exclude name="SlevomatCodingStandard.PHP.DisallowReference.DisallowedAssigningByReference"/>
        <exclude name="SlevomatCodingStandard.PHP.DisallowReference.DisallowedPassingByReference"/>
        <exclude name="SlevomatCodingStandard.PHP.RequireExplicitAssertion"/><!-- We prefer to use inline PHPDoc @var over assert -->
        <exclude name="SlevomatCodingStandard.PHP.UselessParentheses.UselessParentheses"/><!-- It improves readability -->
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/>
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/>
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces"/>
        <exclude name="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator.RequiredNumericLiteralSeparator"/><!-- Allow developers to choose -->
        <exclude name="SlevomatCodingStandard.Numbers.DisallowNumericLiteralSeparator"/><!-- Good to use a separator for money amounts in cents, e.g. 60_00 -->
        <exclude name="SlevomatCodingStandard.Variables.UselessVariable"/><!-- Improve code readability in some cases -->
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/><!-- -->

        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowNullSafeObjectOperator.DisallowedNullSafeObjectOperator"/><!-- Why not? -->
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator.RequiredNullSafeObjectOperator"/><!-- It’s unstable and sometime it’s better (for readability) to not use it -->
        <exclude name="SlevomatCodingStandard.Classes.ForbiddenPublicProperty.ForbiddenPublicProperty"/><!-- It’s in some cases to use public properties -->
        <exclude name="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion.RequiredConstructorPropertyPromotion"/><!-- We currently don’t require to use Constructor Property Promotion -->
        <exclude name="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall.MissingTrailingComma"/><!-- We currently don’t require it -->
        <exclude name="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration.MissingTrailingComma"/><!-- We currently don’t require it -->
    </rule>

    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by .+\.\z~i"/>
                <element value="~^(User|Date|Time): \S+\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
                <element value="~^(Class|Trait) \S+\z~i"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction">
        <properties>
            <property name="enable" value="false"/><!-- Allow to use long function syntax: in some case it’s more readable -->
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <properties>
            <property name="maxLinesLength" value="100"/><!-- Too many violations in old code, default value is 20. @todo use 40 instead -->
        </properties>
    </rule>
    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="0"/>
            <property name="linesCountBetweenAnnotationsGroups" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="declareOnFirstLine"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
            </property>
        </properties>
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint"/><!-- @todo remove this exclusion -->
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification"/><!-- @todo remove this exclusion: it’s really useful for IDE -->
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
            </property>
        </properties>
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint"/><!-- @todo remove it, see https://github.com/slevomat/coding-standard/issues/1203 -->
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
            </property>
        </properties>
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint"/><!-- @todo remove this exclusion -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/><!-- @todo remove this exclusion: it’s really useful for IDE -->
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="120"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
        <severity>6</severity>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/><!--Requires new with parentheses.-->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"><!-- Forbid superfluous whitespaces -->
        <properties>
            <property name="ignoreBlankLines" value="false"/><!-- turned on by PSR2 -> turning back off -->
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>5</severity><!-- turned off by PSR2 -> turning back on -->
    </rule>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/><!-- Don't use a space like $array [$key] -->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/><!--Checks for empty catch clause without a comment.-->
    <rule ref="Squiz.Commenting.FunctionComment"><!-- Force rules for function phpDoc -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/><!-- Allow `@throws` without description -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/><!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/><!-- Does not support collections, i.e. `string[]` -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/><!-- Forces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/><!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/><!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/><!-- Doc comment is not required for every method -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/><!-- Do not require comments for `@param` -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/><!-- Do not require `@param` for all parameters -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/><!-- Do not require `@return` for void methods -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/><!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/><!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/><!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/><!-- Doesn't respect inheritance -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/><!-- Doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital" />
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop" />
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType" />
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName" />
    </rule>
    <rule ref="Squiz.Classes.ClassFileName"/><!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/><!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/><!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.DiscouragedFunctions"/><!--Discourages the use of debug functions.-->
    <rule ref="Squiz.PHP.NonExecutableCode"/><!--Warns about code that can never been executed.-->
    <rule ref="Squiz.Scope.MemberVarScope"/><!--Verifies that class members have scope modifiers.-->
    <rule ref="Squiz.Scope.StaticThisUsage"/><!--Checks for usage of $this in static methods, which will cause runtime errors.-->
    <rule ref="Squiz.Strings.ConcatenationSpacing"><!--Makes sure there are no spaces around the concatenation operator.-->
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/><!-- Use singular quotes by default -->
    <rule ref="Squiz.Strings.EchoedStrings"/><!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/><!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"><!-- Forbid spaces around `->` operator -->
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.OperatorSpacing"><!-- It’s like PRS-12 OperatorSpacing rule, but has do not check for concatenation -->
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <rule ref="IxDFCodingStandard.NamingConventions.MeaningfulVariableName">
        <properties>
            <property name="forbiddenNames" type="array">
                <element key="bool" value="Provide more context"/>
                <element key="boolean" value="Provide more context"/>
                <element key="int" value="Provide more context"/>
                <element key="integer" value="Provide more context"/>
                <element key="float" value="Provide more context"/>
                <element key="double" value="Provide more context"/>
                <element key="arr" value="Provide more context"/>
                <element key="col" value="Provide more context"/>
                <element key="coll" value="Provide more context"/>

                <element key="data" value="Avoid too generic names"/>
                <element key="vdata" value="Avoid too generic names"/>

                <element key="cnt" value="Avoid contractions"/>
                <element key="err" value="Avoid contractions"/>
                <element key="ind" value="Avoid contractions"/>
                <element key="impl" value="Avoid contractions"/>
                <element key="iter" value="Avoid contractions"/>
                <element key="len" value="Avoid contractions"/>
                <element key="proc" value="Avoid contractions"/>
                <element key="res" value="Avoid contractions"/>
                <element key="req" value="Avoid contractions"/>
                <element key="str" value="Avoid contractions"/>
                <element key="var" value="Avoid contractions"/>
            </property>
        </properties>
    </rule>
</ruleset>
