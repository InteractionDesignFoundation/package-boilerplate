<?xml version="1.0"?>
<!--
    This is simply a file with some directory setting. This file is looking by phpcs
    if no argument with another ruleset provided. Thus we can simply run 'phpcs'
    and CS will use this configuration which extends "./.phpcs/ruleset.xml".
    We are divided CS configuration into 2 files because PHPStorm can't use
    this ruleset for inspections (it looking for the file with 'ruleset.xml' name).

    @see https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
    @see https://github.com/squizlabs/PHP_CodeSniffer/blob/3.0/src/Standards/PSR2/ruleset.xml

    examples:
    # check only one file
    phpcs app/Models/Billing/Invoice.php

    # check directory
    phpcs app/Models/Billing


    How to ignore single line: // phpcs:ignore
    How to ignore single rule: // phpcs:ignore Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed
    How to ignore single rule: // phpcs:ignore Generic.Metrics.CyclomaticComplexity.MaxExceeded

    How to ignore lines:
    // phpcs:disable
    $y0ur_uglyCode = array();
    // phpcs:enable

   @see https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#ignoring-files-and-folders
   @see https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#ignoring-parts-of-a-file
-->

<ruleset name="IxDF">
    <description>The IxDF coding standard</description>
    <arg name="extensions" value="php"/><!--CS can also check js, inc, lib file - omit them-->
    <arg name="report-width" value="120"/>

    <!--
          Include everything in another ruleset.xml file. This is
          really handy if you want to customise another developer's
          custom standard. They just need to distribute their single
          ruleset file to allow this.
       -->
    <rule ref="./.phpcs/IxDFCodingStandard/ruleset.xml"/>




    <!--
        If no files or directories are specified on the command line
        your custom standard can specify what files should be checked
        instead.

        Note that specifying any file or directory path
        on the command line will ignore all file tags.
     -->
    <file>./</file>
    <exclude-pattern>!copied_logs</exclude-pattern>
    <exclude-pattern>.docker/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>\.docker/*</exclude-pattern>
    <exclude-pattern>_ide_helper*.php</exclude-pattern>

    <!--see https://github.com/slevomat/coding-standard#slevomatcodingstandardfilestypenamematchesfilename-->
    <rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName"><!--follow the PSR-0 or PSR-4 autoloading standards-->
        <properties>
            <property name="rootNamespaces" type="array">
                <element key="src" value="IxDF"/>
                <element key=".phpcs/IxDFCodingStandard" value="IxDFCodingStandard"/>
                <element key="tests" value="Tests"/>
            </property>
        </properties>
        <severity>6</severity>
    </rule>

    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <exclude-pattern>./tests*</exclude-pattern>
    </rule>

    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod.Found">
        <exclude-pattern>./tests/Factories*</exclude-pattern>
    </rule>

    <!-- Laravel uses if ($state instanceof Closure && $state) { $state = $state->bindTo($this); } that leads to ErrorException for static closures -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure.ClosureNotStatic">
        <exclude-pattern>./tests/Factories*</exclude-pattern>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint">
        <exclude-pattern>./tests*</exclude-pattern>
    </rule>

    <!-- Use DI for request object -->
    <rule ref="IxDFCodingStandard.Functions.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="request" value="null"/>
            </property>
        </properties>
        <exclude-pattern>*/*\.blade.php</exclude-pattern>
    </rule>

    <rule ref="IxDFCodingStandard.Files.BemCasedFilename">
        <include-pattern>*.blade.php</include-pattern>
    </rule>

<!-- This rule alongside its sniffer would be removed after completing #16543 -->
    <rule ref="IxDFCodingStandard.Files.NonExistingTemplate">
<!--        <exclude-pattern>*</exclude-pattern>-->
        <include-pattern>*\.php</include-pattern>
    </rule>

</ruleset>
